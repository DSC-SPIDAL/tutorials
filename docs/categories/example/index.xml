<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Example on SPIDAL Tutorials</title>
    <link>https://dsc-spidal.github.io/tutorials/categories/example/</link>
    <description>Recent content in Example on SPIDAL Tutorials</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Feb 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dsc-spidal.github.io/tutorials/categories/example/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fungi Gene Sequence Clustering</title>
      <link>https://dsc-spidal.github.io/tutorials/post/fungi_gene_sequence_example/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-spidal.github.io/tutorials/post/fungi_gene_sequence_example/</guid>
      <description>

&lt;h2 id=&#34;introduction:39a00125390bdf0bf712c5c9614cc8c5&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The use case of this example is based on a set fungal gene sequences. For the purpose of the example we will only use a very small subset of the complete data to
 keep the runtime at a manageable level. The objective is to cluster the gene sequence data. For this DAMDS and DAPWC algorithms will be utilized. When working with the complete data set the
 following steps are followed (Some steps are done iteratively to refine results further). For this example we will be doing a single iteration.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Process raw data to find Unique sequences that appear more than once ( 170K resulting sequences )&lt;/li&gt;
&lt;li&gt;Run Smith–Waterman algorithm to generate distance matrix&lt;/li&gt;
&lt;li&gt;Run MDS to genereate 3D data points for the data using the distance matrix&lt;/li&gt;
&lt;li&gt;Run DAPWC with a low number of target clusters ( 8 clusters were used in this case ).&lt;/li&gt;
&lt;li&gt;Visualize the resulting 8 clusters to estimate number of sub clusters in each one. If 2 or more of the 8 clusters seem to be more proper when merged, they can be merged before the next iteration&lt;/li&gt;
&lt;li&gt;Run DAPWC for each of the 8 clusters separately, specifying the appropriate number of clusters for each one.&lt;/li&gt;
&lt;li&gt;Visualize the new clusters and merge them where needed&lt;/li&gt;
&lt;li&gt;Collect all the clusters into a single file for the final cluster result.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Results: Below are visualizations of the two major steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Results for the first DAPWC run showing the first 8 clusters - &lt;a href=&#34;https://spidal-gw.dsc.soic.indiana.edu/public/resultsets/1828982764&#34;&gt;https://spidal-gw.dsc.soic.indiana.edu/public/resultsets/1828982764&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Final result with 65 clusters - &lt;a href=&#34;https://spidal-gw.dsc.soic.indiana.edu/public/resultsets/1273112137&#34;&gt;https://spidal-gw.dsc.soic.indiana.edu/public/resultsets/1273112137&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: For some intermediate steps data needs to be formatted before the next step can be completed. To keep the tutorial simple, the repository will provide formatted data for such cases.&lt;/p&gt;

&lt;h2 id=&#34;data:39a00125390bdf0bf712c5c9614cc8c5&#34;&gt;Data&lt;/h2&gt;

&lt;p&gt;The raw data used for the complete use case is in FASTA format. Some statistics about the complete data set is listed below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Total sequences: 7065846 (~7 million).&lt;/li&gt;
&lt;li&gt;Number of Unique sequences: 578486&lt;/li&gt;
&lt;li&gt;Number of Unique sequences that appear more than once: 170264&lt;/li&gt;
&lt;li&gt;Number of sequence of Single Occurrence: 408222&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the complete use case all 170K unique sequences that appear more than once were used. For the tutorial we will only use 2400 gene sequences.&lt;/p&gt;

&lt;h2 id=&#34;pre-processing:39a00125390bdf0bf712c5c9614cc8c5&#34;&gt;Pre Processing&lt;/h2&gt;

&lt;p&gt;First lets get the git repo with the data and scripts to run the workflow.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;//If you have not the applications git repo perform the following&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;clone&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;https&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//github.com/DSC-SPIDAL/applications.git&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;applications&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;fungi&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;gene&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sequence&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inside the &lt;code&gt;fungi-gene-sequence&lt;/code&gt; folder there is a &lt;code&gt;data&lt;/code&gt; folder and a &lt;code&gt;script&lt;/code&gt; folder. The &lt;code&gt;data&lt;/code&gt; folder contains input data and &lt;code&gt;script&lt;/code&gt; contains the scripts to run the workflow.&lt;/p&gt;

&lt;p&gt;The file &lt;code&gt;2400_gene_seq_testset.fna&lt;/code&gt; inside &lt;code&gt;data&lt;/code&gt; contains the 2400 gene sequences that are used in this example. In order to run &lt;code&gt;DAMDS&lt;/code&gt; and &lt;code&gt;DAPWC&lt;/code&gt; we need to generate the
corresponding distance matrix for the data file. For this tutorial distance between two gene sequences are calculated using Smith–Waterman algorithm.
The code for the parallel implementation of &lt;a href=&#34;https://github.com/DSC-SPIDAL/csharp/tree/master/SalsaTPL/Salsa.SmithWatermanMS&#34;&gt;Smith–Waterman&lt;/a&gt; algorithm is available
&lt;a href=&#34;https://github.com/DSC-SPIDAL/csharp/tree/master/SalsaTPL/Salsa.SmithWatermanMS&#34;&gt;here&lt;/a&gt;. This is very time consuming calculation even for a small data set hence the git repo provides the distance matrix that is generated for the sample data set.
The distance matrix &lt;code&gt;distance-matrix.bin&lt;/code&gt; which is available &lt;code&gt;data&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// list the content of the data directory&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;ls&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;
 &lt;span style=&#34;color: #ae81ff&#34;&gt;2400&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;_gene_seq_testset&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;fna&lt;/span&gt;  &lt;span style=&#34;color: #a6e22e&#34;&gt;distance&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;matrix&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;bin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;dimension-reduction-with-mds:39a00125390bdf0bf712c5c9614cc8c5&#34;&gt;Dimension reduction with MDS&lt;/h2&gt;

&lt;p&gt;In order to visualize the data we will perform dimension reduction to reduce the data to 3D using DAMDS algorithm. The data points generated from the DAMDS algorithm can be later used with the clusters generated
with DAPWC to visualize the data in WebPlotViz.&lt;/p&gt;

&lt;p&gt;To run mds locally &lt;code&gt;scripts/run_mds.sh&lt;/code&gt; script file can be used. To run in an HPC environment the script files inside the &lt;code&gt;scripts/hpcscripts&lt;/code&gt; folder can bs used.&lt;/p&gt;

&lt;p&gt;In order to run the program you must configure the &lt;code&gt;config.properties&lt;/code&gt; file to point to the &lt;code&gt;distance-matrix.bin&lt;/code&gt; file, and edit the &lt;code&gt;run_mds.sh&lt;/code&gt; file to point to the &lt;code&gt;config.properties&lt;/code&gt; file. Once the configurations are
done you can simple run the program by executing &lt;code&gt;./run_mds.sh&lt;/code&gt; from the shell.&lt;/p&gt;

&lt;p&gt;The run will create a points file name &lt;code&gt;damds-points.txt&lt;/code&gt; which will contain the 3D data points. In order to upload this data file to WebPlotViz you need to format the data to the correct format. This can be
done using the &lt;code&gt;format_data.sh&lt;/code&gt; script. The script takes a file name as an argument and formats that file and outputs the formatted file with .foramatted extention. ex usage &lt;code&gt;./format_data.sh damds-points.txt&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//Commands and steps - excute 1 command at a time&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;scripts&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;damds&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;vim&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;properties&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// Perform needed config changes, Only need to correct the path for the distance file&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;vim&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;run_mds&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// check that the correct config.properties file is configured&lt;/span&gt;
 &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run_mds&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;..&lt;/span&gt;
 &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;format_data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;damds&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;damds&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;points&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;txt&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// will create the formatted data file in the damds folder&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The formatted file is &lt;code&gt;damds/damds-points.txt.formattedd&lt;/code&gt;. You can upload this file to WebPlotViz for visualiztion.&lt;/p&gt;

&lt;p&gt;The resulting data is pre-loaded in WebPlotViz - &lt;a href=&#34;https://spidal-gw.dsc.soic.indiana.edu/public/resultsets/1002319877&#34;&gt;https://spidal-gw.dsc.soic.indiana.edu/public/resultsets/1002319877&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;clustering-with-dapwc:39a00125390bdf0bf712c5c9614cc8c5&#34;&gt;Clustering with DAPWC&lt;/h2&gt;

&lt;p&gt;The main objective of this use case is to cluster the data. For this we will use the DAPWC algorithm. DAPWC can work directly with the distance matrix to create clusters. The program will output a set of clusters
and the data points that are assigned to each cluster. We can configure the number of clusters that we expect from the algorithm. A rough amount of clusters can be determined from the visualization we did in the
previous step.&lt;/p&gt;

&lt;p&gt;In order to run DAPWC first we need to configure the &lt;code&gt;config.properties&lt;/code&gt; file that is in &lt;code&gt;scripts/dapwc&lt;/code&gt; folder. The following parameters need to be set properly.&lt;/p&gt;

&lt;p&gt;ClusterFile &amp;ndash; the output file which will contain the resulting clusters. Note: The output file changes slightly for example if you give &amp;ldquo;cluster.txt&amp;rdquo; and give 10 for MaxNcent the output file name will be &amp;ldquo;cluster-M10-C10txt&amp;rdquo;
DistanceMatrixFile &amp;ndash; &lt;code&gt;distance-matrix.bin&lt;/code&gt; file which contains the distance matrix
MaxNcent &amp;ndash; the number of clusters to look for
NumberDataPoints &amp;ndash; the number of data points in the distance matrix, this is 2400 for this example&lt;/p&gt;

&lt;p&gt;Then we need to configure the &lt;code&gt;run_dapwc.sh&lt;/code&gt; file to point to the &lt;code&gt;config.properties&lt;/code&gt; file ( If running in an HPC environment use the files in &lt;code&gt;hpcscripts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once the configuration is complete the program can be run using the command &lt;code&gt;./run_dapwc.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;//Commands and steps - execute 1 command at a time&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;applications&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;fungi&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;gene&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sequence&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;scripts&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;dapwc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;vim&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;properties&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// Perform needed config changes for ClusterFile and DistanceMatrixFile&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;vim&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;run_dapwc&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// check that the correct config.properties file is configured&lt;/span&gt;
 &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run_dapwc&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;merging-results-and-visualizing:39a00125390bdf0bf712c5c9614cc8c5&#34;&gt;Merging results and visualizing&lt;/h2&gt;

&lt;p&gt;Once we have outputs from both DAPWC and DAMDS algorithms we can merge the results and visualize them on WebPlotViz. In order the merge the data the script &lt;code&gt;merge_and_format.sh&lt;/code&gt; can be used. The script takes in
two arguments and will generate a file that can be uploaded to WebPlotViz&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The output file from the DAMDS run (ex damds-points.txt)&lt;/li&gt;
&lt;li&gt;The output file from the DAPWC run (ex cluster-M10-C10txt)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//Commands and steps - excute 1 command at a time&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;applications&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;fungi&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;gene&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sequence&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;scripts&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;
 &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;merge_and_format&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;damds&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;damds&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;points&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;txt&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dapwc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;M10&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;C10txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The output file will be &lt;code&gt;points.formatted.txt&lt;/code&gt;. Upload this file to &lt;a href=&#34;https://spidal-gw.dsc.soic.indiana.edu/&#34;&gt;WebPlotViz&lt;/a&gt; to visualize the results in 3D space&lt;/p&gt;

&lt;p&gt;The resulting data is pre-loaded in WebPlotViz - &lt;a href=&#34;https://spidal-gw.dsc.soic.indiana.edu/public/resultsets/280333944&#34;&gt;https://spidal-gw.dsc.soic.indiana.edu/public/resultsets/280333944&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pathology Image Data</title>
      <link>https://dsc-spidal.github.io/tutorials/post/pathology_image_data_example/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-spidal.github.io/tutorials/post/pathology_image_data_example/</guid>
      <description>

&lt;h2 id=&#34;introduction:e4d75ecb629314b2384fe45458a3f187&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The data consist of several pathology images that are described using 96 features. There are 11 images in the dataset totaling upto around 4 million data points. The example will only use a very small
subset of the complete data set. The visualization listed below is a result of a larger run which contained ~220K data points in total. 220K data points where selected by
20K random row samples extracted from each image. The plot is clustered by image. Each of the 11 clusters correspond to a single image, With distance matrix outliers set to 3*sigma&lt;/p&gt;

&lt;p&gt;Visualization using WebPlotViz - &lt;a href=&#34;https://spidal-gw.dsc.soic.indiana.edu/public/resultsets/1678860580&#34;&gt;https://spidal-gw.dsc.soic.indiana.edu/public/resultsets/1678860580&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;data:e4d75ecb629314b2384fe45458a3f187&#34;&gt;Data&lt;/h2&gt;

&lt;p&gt;The filename encodes some information about the tile and the source image. For example, take the following file.&lt;/p&gt;

&lt;p&gt;“TCGA-86-6562-01Z-00-DX1.5dea3015-e606-4837-9f99-ac14f0aa091b_mpp_0.252_x81920_y49152-features.csv”. This file has results generated from image “TCGA-86-6562-01Z-00-DX1.5dea3015-e606-4837-9f99-ac14f0aa091b. Each pixel in the image is 0.252 microns (the _mpp value) in x and y directions. The image tile starts at x=81920 and y=49152 (the _x and _y values). Location (0,0) is the upper left corner of the image.&lt;/p&gt;

&lt;p&gt;The files that start with the same image id collectively store all the results for that image. There are 11 images in this dataset&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;TCGA-55-6543-01Z-00-DX1.08806fe0-84d3-4fd6-8746-6cf557241958&lt;/li&gt;
&lt;li&gt;TCGA-55-6969-01Z-00-DX1.713df9f6-1a91-4e0e-ad43-42e66dcca191&lt;/li&gt;
&lt;li&gt;TCGA-55-6972-01Z-00-DX1.0b441ad0-c30f-4f63-849a-36c98d6e2d3b&lt;/li&gt;
&lt;li&gt;TCGA-55-7914-01Z-00-DX1.875bffe1-8c56-4c29-ab11-6840ee3a643c&lt;/li&gt;
&lt;li&gt;TCGA-55-7994-01Z-00-DX1.a0858080-c471-4337-bc57-7af57e9d92d8&lt;/li&gt;
&lt;li&gt;TCGA-55-7995-01Z-00-DX1.fef24d04-35a0-4f57-8f51-7ad602a78871&lt;/li&gt;
&lt;li&gt;TCGA-55-8087-01Z-00-DX1.548f2800-8caf-4c0e-a7b5-6d3d28315d9c&lt;/li&gt;
&lt;li&gt;TCGA-55-8092-01Z-00-DX1.04e44341-c4bb-4b0b-965c-7ec83f3877a6&lt;/li&gt;
&lt;li&gt;TCGA-55-8094-01Z-00-DX1.8dc29615-e124-4f17-81a1-c0b20c38d12c&lt;/li&gt;
&lt;li&gt;TCGA-83-5908-01Z-00-DX1.381c8f82-61a0-4e9d-982d-1ad0af7bead9&lt;/li&gt;
&lt;li&gt;TCGA-86-6562-01Z-00-DX1.5dea3015-e606-4837-9f99-ac14f0aa091b&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each row of a csv file (other than the first row, which is the header row) stores features computed for a segmented nucleus. There are 97 columns in each file. The first 96 columns are the features. The last column is the polygon representing the boundary of each segmented nucleus in the corresponding image tile. The coordinates of the polygon points are global with respect to the image.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Note: For this tutorial we will only consider a single image &amp;quot;TCGA-55-8094-01Z-00-DX1.8dc29615-e124-4f17-81a1-c0b20c38d12c&amp;quot; for simplicity.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sample data set can be found here - &lt;a href=&#34;https://github.com/DSC-SPIDAL/applications/tree/master/pathalogy-image-data/sampledata&#34;&gt;https://github.com/DSC-SPIDAL/applications/tree/master/pathalogy-image-data/sampledata&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;prerequisites:e4d75ecb629314b2384fe45458a3f187&#34;&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;In order to perform the pre processing download the jar file from &lt;a href=&#34;https://github.com/DSC-SPIDAL/applications/tree/master/pathalogy-image-data/bin&#34;&gt;here&lt;/a&gt; (use the jar with dependencies) or clone and build from the source. The source code for the programs are available &lt;a href=&#34;https://github.com/DSC-SPIDAL/applications/tree/master/pathalogy-image-data&#34;&gt;here&lt;/a&gt; and can be built using the &lt;code&gt;mvn clean install&lt;/code&gt; command&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;//Commands and steps&lt;/span&gt;
 &lt;span style=&#34;color: #75715e&#34;&gt;//If you have not the applications git repo perform the following&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;clone&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;https&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//github.com/DSC-SPIDAL/applications.git&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;applications&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pathalogy&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;mvn&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;install&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;sampledata&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;unzip&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;zip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After building it will create a Jar file inside the &lt;code&gt;target&lt;/code&gt; directory.&lt;/p&gt;

&lt;h1 id=&#34;pre-processing:e4d75ecb629314b2384fe45458a3f187&#34;&gt;Pre Processing&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Step 1:
Single data files need to be created for each image or a single data file needs to be created from all the images. Number of data points in each image varied. The total number of data poitns (rows in files) was around 3.95 million. The program SingleFileGeneration allows the generation of two types of tiles. First it can simply gather all the rows corresponding to a single image to a single file. Secondly it can extract portions of rows from each image to create a collated data file.
Note: All the required script files can be found in the &lt;a href=&#34;https://github.com/DSC-SPIDAL/applications/tree/master/pathalogy-image-data/scripts&#34;&gt;scripts&lt;/a&gt; folder in the git repo.
In
&lt;code&gt;run_single_file_gen.sh&lt;/code&gt; will run a java that creates a single file from the set of image files. The program takes the several inputs and can be configured by editing the &lt;code&gt;run_single_file_gen.sh&lt;/code&gt; using a text editor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cp=&amp;lt;path-to-git&amp;gt;/applications/pathalogy-image-data/target/pathology_image_dat-jar-with-dependencies.jar&lt;/code&gt; &amp;ndash; Needs to point to the jar that was downloaded or built &amp;ldquo;pathology_image_dat-jar-with-dependencies.jar&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dataFolder=&amp;lt;path-to-git&amp;gt;/applications/pathalogy-image-data/sampledata/data&lt;/code&gt; &amp;ndash; Folder that poitns to the sample data ex - /home/tutorial/data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FileName=TCGA-55-8094-01Z-00-DX1.8dc29615-e124-4f17-81a1-c0b20c38d12c&lt;/code&gt; &amp;ndash; The name of the image to be filtered out, no need to change this.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OuputFolder=&amp;lt;path-to-git&amp;gt;/applications/pathalogy-image-data/sampledata&lt;/code&gt; &amp;ndash; Folder to write the output file ex - /home/tutorial/results&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OutputFileName=singleImage&lt;/code&gt;&amp;ndash; Name of the output file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numPoints=2000&lt;/code&gt; &amp;ndash; Number of data points to collect, keep this to a small number to keep runtime small ex- 2000&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #75715e&#34;&gt;//Commands and steps&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;applications&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pathalogy&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;scripts&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;preprocessing&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;vim&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;run_single_file_gen&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// Make changes mentioned above&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run_single_file_gen&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt;
 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a file named &lt;code&gt;singleimage.data&lt;/code&gt; in the &lt;code&gt;&amp;lt;path-to-git&amp;gt;/applications/pathalogy-image-data/sampledata&lt;/code&gt; folder.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Step 2
Distance calculation is done using the data files generated in step 1. DistanceCalculation does this operation in parallel using MPI. &lt;code&gt;run_distance_calculation.sh&lt;/code&gt; script file will run the Distance Calculation program to generate the distance matrix for the file
generated in step 1. The program takes the following parameters which can be modified by opening the &lt;code&gt;run_distance_calculation.sh&lt;/code&gt; file in an text editor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cp=$cp&amp;quot;:&amp;lt;path-to-git&amp;gt;/applications/pathalogy-image-data/target/pathology_image_dat-jar-with-dependencies.jar&amp;quot;&lt;/code&gt; &amp;ndash; Need to add the jar file to the classpath&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dataFile=&amp;lt;path-to-git&amp;gt;/applications/pathalogy-image-data/sampledata/singleimage.data&lt;/code&gt; &amp;ndash; Data file that was generated in step 1.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;points=2000&lt;/code&gt; &amp;ndash; number of points in data file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dimension=96&lt;/code&gt; &amp;ndash; number of dimensions in the data file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outFile=&amp;lt;path-to-git&amp;gt;/applications/pathalogy-image-data/sampledata/out.bin&lt;/code&gt; &amp;ndash; output file name&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;   &lt;span style=&#34;color: #75715e&#34;&gt;//Commands and steps&lt;/span&gt;
   &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;applications&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pathalogy&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;scripts&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;preprocessing&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;
   &lt;span style=&#34;color: #a6e22e&#34;&gt;vim&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;run_distance_calculation&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// Make changes mentioned above&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run_distance_calculation&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt;
  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a file named &lt;code&gt;out.bin&lt;/code&gt; in the &lt;code&gt;&amp;lt;path-to-git&amp;gt;/applications/pathalogy-image-data/sampledata&lt;/code&gt; folder.&lt;/p&gt;

&lt;h1 id=&#34;dimension-reduction-with-mds:e4d75ecb629314b2384fe45458a3f187&#34;&gt;Dimension reduction with MDS&lt;/h1&gt;

&lt;p&gt;The resulting data files obtained by step 2 are used to perform dimension reduction using DAMDS. &lt;code&gt;run_mds.sh&lt;/code&gt; file can be used to run the DAMDS algorithm on the data set that was generated. Only one parameter needs to specified in the file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;confFile=/home/pulasthi/work/FushengWang/tutorial/config.properties&lt;/code&gt; &amp;ndash; Points to the configuration file that is used by DAMDS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An sample conf file can be found in the scripts folder. The configurations specifies many parameters, but for the purpose of the tutorial only two of them need to adjusted.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DistanceMatrixFile = /home/tutorial/results/out.bin&lt;/code&gt; &amp;ndash; Needs to point to the distance file generated in step 2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NumberDataPoints = 2000&lt;/code&gt; &amp;ndash; specifies the number of data points in the file. The example values used 2000 when creating the single data file so the value should reflect that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The DAMDS program will generate several output files. The file that contains the data points that were reduced to 3 dimensions is &amp;ldquo;damds-points.txt&amp;rdquo; ( This can be configured in the properties file ).
 You can open the file in an text editor to look at the generated data points.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #75715e&#34;&gt;//Commands and steps&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;applications&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pathalogy&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;scripts&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;mds&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;vim&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;properties&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// Make changes mentioned above&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run_mds&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt;
   
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This will create a file named &lt;code&gt;damds-points.txt&lt;/code&gt; in the &lt;code&gt;&amp;lt;path-to-git&amp;gt;/applications/pathalogy-image-data/scripts/mds&lt;/code&gt; folder.&lt;/p&gt;

&lt;h1 id=&#34;visualization:e4d75ecb629314b2384fe45458a3f187&#34;&gt;Visualization&lt;/h1&gt;

&lt;p&gt;The 3D data generated from MDS can be visualized using WebPlotViz. In order upload the points file to the tool first it needs to be formatted to the correct format. &lt;code&gt;format_data.sh&lt;/code&gt; performs the necessary formatting. The script takes the file that needs
 to be formatted and creates a formatted file with same name and &amp;ldquo;.formatted&amp;rdquo; at the end. Ex &amp;ldquo;./format_data.sh damds-points.txt&amp;rdquo; will output &amp;ldquo;damds-points.txt.formatted&amp;rdquo;. This file can then be uploaded to
 WebPlotViz to be visualized.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;     &lt;span style=&#34;color: #75715e&#34;&gt;//Commands and steps&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;applications&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pathalogy&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;scripts&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;format_data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;mds&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;damds&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;points&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;txt&lt;/span&gt;
 
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This will create a file named &lt;code&gt;damds-points.txt.formatted&lt;/code&gt; in the &lt;code&gt;&amp;lt;path-to-git&amp;gt;/applications/pathalogy-image-data/scripts/mds&lt;/code&gt; folder. Upload this file to &lt;a href=&#34;https://spidal-gw.dsc.soic.indiana.edu/&#34;&gt;WebPlotViz&lt;/a&gt; to visualize the results in 3D space&lt;/p&gt;

&lt;p&gt;The resulting data is visualised in WebPlotViz &lt;a href=&#34;https://spidal-gw.dsc.soic.indiana.edu/public/resultsets/1797346761&#34;&gt;https://spidal-gw.dsc.soic.indiana.edu/public/resultsets/1797346761&lt;/a&gt;. Note that since this example was done only with 2000 data points there is no visible structure.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>