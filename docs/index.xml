<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SPIDAL Tutorials</title>
    <link>https://dsc-spidal.github.io/tutorials/</link>
    <description>Recent content on SPIDAL Tutorials</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Feb 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dsc-spidal.github.io/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pathology Image Data</title>
      <link>https://dsc-spidal.github.io/tutorials/post/pathology_image_data_example/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-spidal.github.io/tutorials/post/pathology_image_data_example/</guid>
      <description>

&lt;h1 id=&#34;introduction:e4d75ecb629314b2384fe45458a3f187&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Small description on the data&lt;/p&gt;

&lt;h1 id=&#34;data:e4d75ecb629314b2384fe45458a3f187&#34;&gt;Data&lt;/h1&gt;

&lt;p&gt;The filename encodes some information about the tile and the source image. For example, take the following file.&lt;/p&gt;

&lt;p&gt;“TCGA-86-6562-01Z-00-DX1.5dea3015-e606-4837-9f99-ac14f0aa091b_mpp_0.252_x81920_y49152-features.csv”. This file has results generated from image “TCGA-86-6562-01Z-00-DX1.5dea3015-e606-4837-9f99-ac14f0aa091b. Each pixel in the image is 0.252 microns (the _mpp value) in x and y directions. The image tile starts at x=81920 and y=49152 (the _x and _y values). Location (0,0) is the upper left corner of the image.&lt;/p&gt;

&lt;p&gt;The files that start with the same image id collectively store all the results for that image. There are 11 images in this dataset&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;TCGA-55-6543-01Z-00-DX1.08806fe0-84d3-4fd6-8746-6cf557241958&lt;/li&gt;
&lt;li&gt;TCGA-55-6969-01Z-00-DX1.713df9f6-1a91-4e0e-ad43-42e66dcca191&lt;/li&gt;
&lt;li&gt;TCGA-55-6972-01Z-00-DX1.0b441ad0-c30f-4f63-849a-36c98d6e2d3b&lt;/li&gt;
&lt;li&gt;TCGA-55-7914-01Z-00-DX1.875bffe1-8c56-4c29-ab11-6840ee3a643c&lt;/li&gt;
&lt;li&gt;TCGA-55-7994-01Z-00-DX1.a0858080-c471-4337-bc57-7af57e9d92d8&lt;/li&gt;
&lt;li&gt;TCGA-55-7995-01Z-00-DX1.fef24d04-35a0-4f57-8f51-7ad602a78871&lt;/li&gt;
&lt;li&gt;TCGA-55-8087-01Z-00-DX1.548f2800-8caf-4c0e-a7b5-6d3d28315d9c&lt;/li&gt;
&lt;li&gt;TCGA-55-8092-01Z-00-DX1.04e44341-c4bb-4b0b-965c-7ec83f3877a6&lt;/li&gt;
&lt;li&gt;TCGA-55-8094-01Z-00-DX1.8dc29615-e124-4f17-81a1-c0b20c38d12c&lt;/li&gt;
&lt;li&gt;TCGA-83-5908-01Z-00-DX1.381c8f82-61a0-4e9d-982d-1ad0af7bead9&lt;/li&gt;
&lt;li&gt;TCGA-86-6562-01Z-00-DX1.5dea3015-e606-4837-9f99-ac14f0aa091b&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each row of a csv file (other than the first row, which is the header row) stores features computed for a segmented nucleus. There are 97 columns in each file. The first 96 columns are the features. The last column is the polygon representing the boundary of each segmented nucleus in the corresponding image tile. The coordinates of the polygon points are global with respect to the image.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Note: For this tutorial we will only consider a single image &amp;quot;TCGA-55-8094-01Z-00-DX1.8dc29615-e124-4f17-81a1-c0b20c38d12c&amp;quot; for simplicity.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sample data set can be found here - TODO: Add location of data&lt;/p&gt;

&lt;h1 id=&#34;prerequisites:e4d75ecb629314b2384fe45458a3f187&#34;&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;In order to perform the pre processing download the jar file from here ( TODO Add link to jar ) or clone and build from the source. The source code for the programs are available here (TODO) and can be built using the &lt;code&gt;mvn clean install&lt;/code&gt; command&lt;/p&gt;

&lt;h1 id=&#34;pre-processing:e4d75ecb629314b2384fe45458a3f187&#34;&gt;Pre Processing&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Step 1:
Single data files need to be created for each image or a single data file needs to be created from all the images. Number of data points in each image varied. The total number of data poitns (rows in files) was around 3.95 million. The program SingleFileGeneration allows the generation of two types of tiles. First it can simply gather all the rows corresponding to a single image to a single file. Secondly it can extract portions of rows from each image to create a collated data file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In
 &lt;code&gt;run_single_file_gen.sh&lt;/code&gt; will run a java that creates a single file from the set of image files. The program takes the several inputs and can be configured by editing the &lt;code&gt;run_single_file_gen.sh&lt;/code&gt; using an text editor.&lt;/p&gt;

&lt;p&gt;cp= Needs to point to the jar that was downloaded or built &amp;ldquo;pathology_image_dat-jar-with-dependencies.jar&amp;rdquo;
 dataFolder= Folder that poitns to the sample data ex - /home/tutorial/data
 FileName=TCGA-55-8094-01Z-00-DX1.8dc29615-e124-4f17-81a1-c0b20c38d12c - The name of the image to be filtered out, no need to change this.
 OuputFolder= Folder to write the output file ex - /home/tutorial/results
 OutputFileName= Name of the output file ex -singleimage
 numPoints= Number of data points to collect, keep this to a small number to keep runtime small ex- 2000&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Step 2
Distance calculation is done using the data files generated in step 1. DistanceCalculation does this operation in parallel using MPI. &lt;code&gt;run_distance_calculation.sh&lt;/code&gt; script file will run the Distance Calculation program to generate the distance matrix for the file
generated in step 1. The program takes the following parameters which can be modified by opening the &lt;code&gt;run_distance_calculation.sh&lt;/code&gt; file in an text editor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;cp=$cp&amp;rdquo;:/home/tutorial/pathology_image_dat-jar-with-dependencies.jar&amp;rdquo; &amp;ndash; Need to add the jar file to the classpath
 dataFile=/home/tutorial/results/singleimage.data &amp;ndash; Data file that was generated in step 1.
 points=2000 - number of points in data file
 dimension=96 - number of dimensions in the data file
 outFile=/home/tutorial/results/out.bin - output file name&lt;/p&gt;

&lt;h1 id=&#34;dimension-reduction-with-mds:e4d75ecb629314b2384fe45458a3f187&#34;&gt;Dimension reduction with MDS&lt;/h1&gt;

&lt;p&gt;The resulting data files obtained by step 2 are used to perform dimension reduction using DAMDS. &lt;code&gt;run_mds.sh&lt;/code&gt; file can be used to run the DAMDS algorithm on the data set that was generated. Only one parameter needs to specified in the file.&lt;/p&gt;

&lt;p&gt;confFile=/home/pulasthi/work/FushengWang/tutorial/config.properties &amp;ndash; Points to the configuration file that is used by DAMDS&lt;/p&gt;

&lt;p&gt;An sample conf file can be found in the scripts folder. The configurations specifies many parameters, but for the purpose of the tutorial only two of them need to adjusted.&lt;/p&gt;

&lt;p&gt;DistanceMatrixFile = /home/tutorial/results/out.bin - Needs to point to the distance file generated in step 2
 NumberDataPoints = 2000 &amp;ndash; specifies the number of data points in the file. The example values used 2000 when creating the single data file so the value should reflect that.&lt;/p&gt;

&lt;p&gt;The DAMDS program will generate several output files. The file that contains the data points that were reduced to 3 dimensions is &amp;ldquo;damds-points.txt&amp;rdquo; ( This can be configured in the properties file ).
 You can open the file in an text editor to look at the generated data points.&lt;/p&gt;

&lt;h1 id=&#34;visualization:e4d75ecb629314b2384fe45458a3f187&#34;&gt;Visualization&lt;/h1&gt;

&lt;p&gt;The 3D data generated from MDS can be visualized using WebPlotViz. In order upload the points file to the tool first it needs to be formatted to the correct format. &lt;code&gt;format_data.sh&lt;/code&gt; performs the necessary formatting. The script takes the file that needs
 to be formatted and creates a formatted file with same name and &amp;ldquo;.formatted&amp;rdquo; at the end. Ex &amp;ldquo;./format_data.sh damds-points.txt&amp;rdquo; will output &amp;ldquo;damds-points.txt.formatted&amp;rdquo;. This file can then be uploaded to
 WebPlotViz to be visualized.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Prerequisites</title>
      <link>https://dsc-spidal.github.io/tutorials/post/install_ompi.md/</link>
      <pubDate>Fri, 06 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-spidal.github.io/tutorials/post/install_ompi.md/</guid>
      <description>

&lt;h1 id=&#34;prerequisites:529b66b2fe7b69acab780432cc5eade5&#34;&gt;Prerequisites&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Operating System&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPDIAL is extensively tested and known to work on,&lt;/li&gt;
&lt;li&gt;Red Hat Enterprise Linux Server release 6.7 (Santiago)&lt;/li&gt;
&lt;li&gt;Red Hat Enterprise Linux Server release 5.10 (Tikanga)&lt;/li&gt;
&lt;li&gt;Ubuntu 14.04 LTS&lt;/li&gt;
&lt;li&gt;This may work in Windows systems depending on the ability to setup OpenMPI properly, however, this has not been tested and we recommend choosing a Linux based operating system instead.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Java&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download Oracle JDK 8 from &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/index.html&#34;&gt;http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Extract the archive to a folder named jdk1.8.0&lt;/li&gt;
&lt;li&gt;Set the following environment variables.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jdk1&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;.8.0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;directory&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$JAVA_HOME&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;bin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$PATH&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JAVA_HOME&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apache Maven&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download latest Maven release from &lt;a href=&#34;http://maven.apache.org/download.cgi&#34;&gt;http://maven.apache.org/download.cgi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Extract it to some folder and set the following environment variables.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;MVN_HOME&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Maven&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;folder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$PATH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$MVN_HOME&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;bin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$PATH&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MVN_HOME&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OpenMPI&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We recommend using &lt;code&gt;OpenMPI 1.10.1&lt;/code&gt; although it work with the previous 1.8 versions. Note, if using a version other than 1.10.1 please remember to set Maven dependency appropriately in the &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Download OpenMPI 1.10.1 from &lt;a href=&#34;http://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.1.tar.gz&#34;&gt;http://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.1.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Extract the archive to a folder named &lt;code&gt;openmpi-1.10.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Also create a directory named &lt;code&gt;build&lt;/code&gt; in some location. We will use this to install OpenMPI
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;   &lt;span style=&#34;color: #f8f8f2&#34;&gt;wget&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;no&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;check&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;certificate&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.1.tar.gz&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;tar&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;xvf&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;openmpi&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1.10.1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;tar&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;gz&lt;/span&gt;
   &lt;span style=&#34;color: #f8f8f2&#34;&gt;mkdir&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;build&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Set the following environment variables
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;BUILD&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;directory&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;OMPI_1101&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;openmpi&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1.10.1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;directory&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$BUILD&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;bin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$PATH&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$BUILD&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;lib&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$LD_LIBRARY_PATH&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BUILD&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;OMPI_1101&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PATH&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LD_LIBRARY_PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;The instructions to build OpenMPI depend on the platform. Therefore, we highly recommend looking into the &lt;code&gt;$OMPI_1101/INSTALL&lt;/code&gt; file. Platform specific build files are available in &lt;code&gt;$OMPI_1101/contrib/platform&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;In general, please specify &lt;code&gt;--prefix=$BUILD&lt;/code&gt; and &lt;code&gt;--enable-mpi-java&lt;/code&gt; as arguments to &lt;code&gt;configure&lt;/code&gt; script. If Infiniband is available (highly recommended) specify &lt;code&gt;--with-verbs=&amp;lt;path-to-verbs-installation&amp;gt;&lt;/code&gt;. Usually, the path to verbs installation is &lt;code&gt;/usr&lt;/code&gt;. In summary, the following commands will build OpenMPI for a Linux system. Also if you have a multicore machine using &lt;code&gt;make -j 8&lt;/code&gt; will use 8 cores to build in parallel.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$OMPI_1101&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;./&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;prefix&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$BUILD&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;enable&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mpi&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;java&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;make&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;make&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;If everything goes well &lt;code&gt;mpirun --version&lt;/code&gt; will show &lt;code&gt;mpirun (Open MPI) 1.10.1&lt;/code&gt;. Execute the following command to instal &lt;code&gt;$OMPI_1101/ompi/mpi/java/java/mpi.jar&lt;/code&gt; as a Maven artifact.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;mvn&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;install&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;install&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DcreateChecksum&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Dpackaging&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jar&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Dfile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$OMPI_1101&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ompi&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mpi&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mpi&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;jar&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DgroupId&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ompi&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DartifactId&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ompijavabinding&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Dversion&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1.10.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Few examples are available in &lt;code&gt;$OMPI_1101/examples&lt;/code&gt;. Please use &lt;code&gt;mpijavac&lt;/code&gt; with other parameters similar to &lt;code&gt;javac&lt;/code&gt; command to compile OpenMPI Java programs. Once compiled &lt;code&gt;mpirun [options] java -cp &amp;lt;classpath&amp;gt; class-name arguments&lt;/code&gt; command with proper values set as arguments will run the MPI Java program.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Installing SPIDAL Software</title>
      <link>https://dsc-spidal.github.io/tutorials/post/install_spidal/</link>
      <pubDate>Fri, 06 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://dsc-spidal.github.io/tutorials/post/install_spidal/</guid>
      <description>

&lt;h1 id=&#34;common:d5ba1b43025eafd1c38ad1a13d6b817c&#34;&gt;common&lt;/h1&gt;

&lt;p&gt;SPIDAL libraries depend on the common project in DSC-SPIDAL github. We need to build it first.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;clone&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;https&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//github.com/DSC-SPIDAL/common.git&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;common&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;mvn&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;da-mds:d5ba1b43025eafd1c38ad1a13d6b817c&#34;&gt;DA-MDS&lt;/h1&gt;

&lt;p&gt;DA-MDS is the deterministic annealing implementation of Multidimensional Scaling algorithm. The project can be built from the source.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;clone&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;https&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//github.com/DSC-SPIDAL/damds.git&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;damds&lt;/span&gt;
 &lt;span style=&#34;color: #a6e22e&#34;&gt;mvn&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After building it will create a Jar file inside the &lt;code&gt;target&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Usually people run MDS using a cluster manager such as slurm. We have provided a sample script in &lt;code&gt;bin&lt;/code&gt; directory that can be used to run the program on a single machine.&lt;/p&gt;

&lt;h2 id=&#34;run-example-local-machine:d5ba1b43025eafd1c38ad1a13d6b817c&#34;&gt;Run example - local machine&lt;/h2&gt;

&lt;p&gt;DA-MDS is configured using a configuration file. A sample configuration file with two input files for distance and weight matrices can be found in &lt;code&gt;examples/input&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Lets run this sample using the &lt;code&gt;damds.sh&lt;/code&gt; file found in &lt;code&gt;bin&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;bin&lt;/span&gt;
 &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;damds&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;examples&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;properties&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first argument to the script is the location of configuration file. Second argument is the number of nodes.
In our case it is 1 as we run on local machine. The third argument is the number of processes. In this case we are using 4 processes.&lt;/p&gt;

&lt;p&gt;After the program finished executing, the output will be in a file called &lt;code&gt;damds-points.txt&lt;/code&gt; inside the &lt;code&gt;bin&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;You can upload this file to &lt;code&gt;WebPlotViz&lt;/code&gt; using the following link to visualize the data. Note: you may need to register in WebPlotViz before you can upload the files.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;https&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;//spidal-gw.dsc.soic.indiana.edu/dashboard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;run-example-slurm-cluster:d5ba1b43025eafd1c38ad1a13d6b817c&#34;&gt;Run example - slurm cluster&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;damds_slurm.sh&lt;/code&gt; found in &lt;code&gt;bin&lt;/code&gt; directory to run the program in a &lt;code&gt;slurm&lt;/code&gt; HPC cluster. In this example we assume that you have built &lt;code&gt;damds&lt;/code&gt; in a shared file system where every node can access the data files with the same file path.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;bin&lt;/span&gt;
 &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;damds_slurm&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;sh&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;examples&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;properties&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The above command will run the example using 4 nodes.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>